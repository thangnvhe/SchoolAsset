// <auto-generated />
using System;
using AssetManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetManagement.Migrations
{
    [DbContext(typeof(AssetDbContext))]
    [Migration("20250601140110_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.Asset", b =>
                {
                    b.Property<string>("AssetID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AssetTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AssetID");

                    b.HasIndex("AssetTypeID");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssetID = "AST001",
                            AssetName = "Bàn học A1",
                            AssetTypeID = 5,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3015),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3028)
                        },
                        new
                        {
                            AssetID = "AST002",
                            AssetName = "Ghế học A1",
                            AssetTypeID = 6,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3031),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3032)
                        },
                        new
                        {
                            AssetID = "AST003",
                            AssetName = "Đèn bàn A1",
                            AssetTypeID = 7,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3033),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3034)
                        },
                        new
                        {
                            AssetID = "AST004",
                            AssetName = "Quạt điện A1",
                            AssetTypeID = 8,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3034),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3035)
                        },
                        new
                        {
                            AssetID = "AST005",
                            AssetName = "Laptop Dell Vostro",
                            AssetTypeID = 2,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3036),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3036)
                        },
                        new
                        {
                            AssetID = "AST006",
                            AssetName = "Máy tính HP Compaq",
                            AssetTypeID = 1,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3038),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3038)
                        },
                        new
                        {
                            AssetID = "AST007",
                            AssetName = "Máy in Canon LBP",
                            AssetTypeID = 3,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3039),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3039)
                        },
                        new
                        {
                            AssetID = "AST008",
                            AssetName = "Máy chiếu Epson",
                            AssetTypeID = 4,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3040),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3040)
                        },
                        new
                        {
                            AssetID = "AST009",
                            AssetName = "Tủ tài liệu gỗ",
                            AssetTypeID = 9,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3041),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3042)
                        },
                        new
                        {
                            AssetID = "AST010",
                            AssetName = "Camera Hikvision",
                            AssetTypeID = 10,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3043),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3043)
                        },
                        new
                        {
                            AssetID = "AST011",
                            AssetName = "Bàn học A2",
                            AssetTypeID = 5,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3044),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3045)
                        },
                        new
                        {
                            AssetID = "AST012",
                            AssetName = "Ghế học A2",
                            AssetTypeID = 6,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3046),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3046)
                        },
                        new
                        {
                            AssetID = "AST013",
                            AssetName = "Đèn bàn A2",
                            AssetTypeID = 7,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3047),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3053)
                        },
                        new
                        {
                            AssetID = "AST014",
                            AssetName = "Quạt điện A2",
                            AssetTypeID = 8,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3055),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3055)
                        },
                        new
                        {
                            AssetID = "AST015",
                            AssetName = "Laptop Lenovo ThinkPad",
                            AssetTypeID = 2,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3056),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3058)
                        },
                        new
                        {
                            AssetID = "AST016",
                            AssetName = "Máy tính Dell Optiplex",
                            AssetTypeID = 1,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3077),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3078)
                        },
                        new
                        {
                            AssetID = "AST017",
                            AssetName = "Máy in HP LaserJet",
                            AssetTypeID = 3,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3079),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3079)
                        },
                        new
                        {
                            AssetID = "AST018",
                            AssetName = "Máy chiếu Sony",
                            AssetTypeID = 4,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3081),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3081)
                        },
                        new
                        {
                            AssetID = "AST019",
                            AssetName = "Tủ sắt 3 ngăn",
                            AssetTypeID = 9,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3082),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3082)
                        },
                        new
                        {
                            AssetID = "AST020",
                            AssetName = "Camera Dahua",
                            AssetTypeID = 10,
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3083),
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3083)
                        });
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.AssetItem", b =>
                {
                    b.Property<string>("AssetItemID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AssetItemID");

                    b.HasIndex("LocationID");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("InventoryID", "AssetItemID")
                        .IsUnique();

                    b.ToTable("AssetItems");

                    b.HasData(
                        new
                        {
                            AssetItemID = "AI001",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3623),
                            InventoryID = 1,
                            LocationID = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3624),
                            UpdatedBy = "user9"
                        },
                        new
                        {
                            AssetItemID = "AI002",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3629),
                            InventoryID = 2,
                            LocationID = 2,
                            Status = "InUse",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3629),
                            UpdatedBy = "user10"
                        },
                        new
                        {
                            AssetItemID = "AI003",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3631),
                            InventoryID = 3,
                            LocationID = 3,
                            Status = "Maintenance",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3632),
                            UpdatedBy = "user11"
                        },
                        new
                        {
                            AssetItemID = "AI004",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3634),
                            InventoryID = 4,
                            LocationID = 4,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3634),
                            UpdatedBy = "user12"
                        },
                        new
                        {
                            AssetItemID = "AI005",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3636),
                            InventoryID = 5,
                            LocationID = 1,
                            Status = "InUse",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3637),
                            UpdatedBy = "user9"
                        },
                        new
                        {
                            AssetItemID = "AI006",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3639),
                            InventoryID = 6,
                            LocationID = 2,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3640),
                            UpdatedBy = "user10"
                        },
                        new
                        {
                            AssetItemID = "AI007",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3642),
                            InventoryID = 7,
                            LocationID = 3,
                            Status = "Retired",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3642),
                            UpdatedBy = "user11"
                        },
                        new
                        {
                            AssetItemID = "AI008",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3644),
                            InventoryID = 8,
                            LocationID = 4,
                            Status = "InUse",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3644),
                            UpdatedBy = "user12"
                        },
                        new
                        {
                            AssetItemID = "AI009",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3646),
                            InventoryID = 9,
                            LocationID = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3647),
                            UpdatedBy = "user9"
                        },
                        new
                        {
                            AssetItemID = "AI010",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3649),
                            InventoryID = 10,
                            LocationID = 2,
                            Status = "Maintenance",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3649),
                            UpdatedBy = "user10"
                        },
                        new
                        {
                            AssetItemID = "AI011",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3651),
                            InventoryID = 11,
                            LocationID = 3,
                            Status = "InUse",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3652),
                            UpdatedBy = "user11"
                        },
                        new
                        {
                            AssetItemID = "AI012",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3654),
                            InventoryID = 12,
                            LocationID = 4,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3654),
                            UpdatedBy = "user12"
                        },
                        new
                        {
                            AssetItemID = "AI013",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3656),
                            InventoryID = 13,
                            LocationID = 1,
                            Status = "InUse",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3656),
                            UpdatedBy = "user9"
                        },
                        new
                        {
                            AssetItemID = "AI014",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3658),
                            InventoryID = 14,
                            LocationID = 2,
                            Status = "Retired",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3659),
                            UpdatedBy = "user10"
                        },
                        new
                        {
                            AssetItemID = "AI015",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3661),
                            InventoryID = 15,
                            LocationID = 3,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3661),
                            UpdatedBy = "user11"
                        },
                        new
                        {
                            AssetItemID = "AI016",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3663),
                            InventoryID = 16,
                            LocationID = 4,
                            Status = "InUse",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3663),
                            UpdatedBy = "user12"
                        },
                        new
                        {
                            AssetItemID = "AI017",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3665),
                            InventoryID = 17,
                            LocationID = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3665),
                            UpdatedBy = "user9"
                        },
                        new
                        {
                            AssetItemID = "AI018",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3668),
                            InventoryID = 18,
                            LocationID = 2,
                            Status = "Maintenance",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3668),
                            UpdatedBy = "user10"
                        },
                        new
                        {
                            AssetItemID = "AI019",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3710),
                            InventoryID = 19,
                            LocationID = 3,
                            Status = "InUse",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3711),
                            UpdatedBy = "user11"
                        },
                        new
                        {
                            AssetItemID = "AI020",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3713),
                            InventoryID = 20,
                            LocationID = 4,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3713),
                            UpdatedBy = "user12"
                        });
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.AssetType", b =>
                {
                    b.Property<int>("AssetTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetTypeID"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AssetTypeID");

                    b.ToTable("AssetTypes");

                    b.HasData(
                        new
                        {
                            AssetTypeID = 1,
                            Description = "Thiết bị văn phòng cho nhân viên.",
                            TypeName = "Máy tính để bàn"
                        },
                        new
                        {
                            AssetTypeID = 2,
                            Description = "Thiết bị di động cho quản lý và nhân sự.",
                            TypeName = "Laptop"
                        },
                        new
                        {
                            AssetTypeID = 3,
                            Description = "Dùng để in tài liệu trong văn phòng.",
                            TypeName = "Máy in"
                        },
                        new
                        {
                            AssetTypeID = 4,
                            Description = "Dùng trong phòng học hoặc họp nhóm.",
                            TypeName = "Máy chiếu"
                        },
                        new
                        {
                            AssetTypeID = 5,
                            Description = "Bàn dùng trong phòng học cho học sinh/sinh viên.",
                            TypeName = "Bàn học"
                        },
                        new
                        {
                            AssetTypeID = 6,
                            Description = "Ghế văn phòng hoặc phòng học.",
                            TypeName = "Ghế ngồi"
                        },
                        new
                        {
                            AssetTypeID = 7,
                            Description = "Đèn chiếu sáng cho bàn làm việc hoặc học tập.",
                            TypeName = "Đèn bàn"
                        },
                        new
                        {
                            AssetTypeID = 8,
                            Description = "Dùng làm mát trong phòng học hoặc làm việc.",
                            TypeName = "Quạt điện"
                        },
                        new
                        {
                            AssetTypeID = 9,
                            Description = "Tủ đựng hồ sơ và tài liệu.",
                            TypeName = "Tủ tài liệu"
                        },
                        new
                        {
                            AssetTypeID = 10,
                            Description = "Thiết bị an ninh gắn tại các khu vực quan trọng.",
                            TypeName = "Camera giám sát"
                        });
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.InventoryAsset", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"));

                    b.Property<string>("AssetID")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("InventoryID");

                    b.HasIndex("AssetID");

                    b.HasIndex("SupplierID");

                    b.ToTable("InventoryAssets");

                    b.HasData(
                        new
                        {
                            InventoryID = 1,
                            AssetID = "AST001",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3382),
                            InvoiceNumber = "INV-20240101",
                            Notes = "Dành cho phòng lab A1",
                            PurchaseDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 12000000m,
                            Quantity = 10,
                            SupplierID = 1
                        },
                        new
                        {
                            InventoryID = 2,
                            AssetID = "AST002",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3386),
                            InvoiceNumber = "INV-20240210",
                            Notes = "Dành cho lớp học thực hành",
                            PurchaseDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 500000m,
                            Quantity = 50,
                            SupplierID = 2
                        },
                        new
                        {
                            InventoryID = 3,
                            AssetID = "AST003",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3389),
                            InvoiceNumber = "INV-20240305",
                            Notes = "Bổ sung máy chiếu lớp học",
                            PurchaseDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 15000000m,
                            Quantity = 15,
                            SupplierID = 3
                        },
                        new
                        {
                            InventoryID = 4,
                            AssetID = "AST004",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3391),
                            InvoiceNumber = "INV-20240408",
                            Notes = "Thay mới bàn học khối 10",
                            PurchaseDate = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 4000000m,
                            Quantity = 8,
                            SupplierID = 1
                        },
                        new
                        {
                            InventoryID = 5,
                            AssetID = "AST005",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3394),
                            InvoiceNumber = "INV-20240520",
                            Notes = "Ghế cho phòng họp",
                            PurchaseDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 7000000m,
                            Quantity = 6,
                            SupplierID = 4
                        },
                        new
                        {
                            InventoryID = 6,
                            AssetID = "AST006",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3397),
                            InvoiceNumber = "INV-20240601",
                            Notes = "Bút viết bảng dùng hàng tháng",
                            PurchaseDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 300000m,
                            Quantity = 100,
                            SupplierID = 5
                        },
                        new
                        {
                            InventoryID = 7,
                            AssetID = "AST007",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3400),
                            InvoiceNumber = "INV-20240710",
                            Notes = "Máy scan dùng chung phòng hành chính",
                            PurchaseDate = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 20000000m,
                            Quantity = 3,
                            SupplierID = 6
                        },
                        new
                        {
                            InventoryID = 8,
                            AssetID = "AST008",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3403),
                            InvoiceNumber = "INV-20240815",
                            Notes = "Mua máy in phòng giáo vụ",
                            PurchaseDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 8000000m,
                            Quantity = 5,
                            SupplierID = 2
                        },
                        new
                        {
                            InventoryID = 9,
                            AssetID = "AST009",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3405),
                            InvoiceNumber = "INV-20240920",
                            Notes = "Hóa chất dùng cho thí nghiệm",
                            PurchaseDate = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 450000m,
                            Quantity = 20,
                            SupplierID = 1
                        },
                        new
                        {
                            InventoryID = 10,
                            AssetID = "AST010",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3409),
                            InvoiceNumber = "INV-20241005",
                            Notes = "Máy hút bụi sử dụng cho toàn trường",
                            PurchaseDate = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 9500000m,
                            Quantity = 4,
                            SupplierID = 4
                        },
                        new
                        {
                            InventoryID = 11,
                            AssetID = "AST011",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3449),
                            InvoiceNumber = "INV-20241110",
                            Notes = "Trang bị micro phòng học ngoại ngữ",
                            PurchaseDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 2500000m,
                            Quantity = 10,
                            SupplierID = 3
                        },
                        new
                        {
                            InventoryID = 12,
                            AssetID = "AST012",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3451),
                            InvoiceNumber = "INV-20241201",
                            Notes = "Màn hình LED phòng hội trường",
                            PurchaseDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 12500000m,
                            Quantity = 6,
                            SupplierID = 5
                        },
                        new
                        {
                            InventoryID = 13,
                            AssetID = "AST013",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3459),
                            InvoiceNumber = "INV-20250108",
                            Notes = "Bàn giáo viên thay thế định kỳ",
                            PurchaseDate = new DateTime(2025, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 950000m,
                            Quantity = 25,
                            SupplierID = 1
                        },
                        new
                        {
                            InventoryID = 14,
                            AssetID = "AST014",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3462),
                            InvoiceNumber = "INV-20250205",
                            Notes = "Tập vở phát cho học sinh",
                            PurchaseDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 370000m,
                            Quantity = 40,
                            SupplierID = 2
                        },
                        new
                        {
                            InventoryID = 15,
                            AssetID = "AST015",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3483),
                            InvoiceNumber = "INV-20250301",
                            Notes = "Máy tính dựng video",
                            PurchaseDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 30000000m,
                            Quantity = 2,
                            SupplierID = 6
                        },
                        new
                        {
                            InventoryID = 16,
                            AssetID = "AST016",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3485),
                            InvoiceNumber = "INV-20250320",
                            Notes = "Ghế học sinh mẫu mới",
                            PurchaseDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 1200000m,
                            Quantity = 30,
                            SupplierID = 3
                        },
                        new
                        {
                            InventoryID = 17,
                            AssetID = "AST017",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3488),
                            InvoiceNumber = "INV-20250401",
                            Notes = "Loa di động dùng cho sự kiện",
                            PurchaseDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 650000m,
                            Quantity = 25,
                            SupplierID = 4
                        },
                        new
                        {
                            InventoryID = 18,
                            AssetID = "AST018",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3491),
                            InvoiceNumber = "INV-20250415",
                            Notes = "Tivi treo tường các phòng học",
                            PurchaseDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 9000000m,
                            Quantity = 5,
                            SupplierID = 5
                        },
                        new
                        {
                            InventoryID = 19,
                            AssetID = "AST019",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3494),
                            InvoiceNumber = "INV-20250501",
                            Notes = "Thiết bị học trực tuyến",
                            PurchaseDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 18000000m,
                            Quantity = 3,
                            SupplierID = 6
                        },
                        new
                        {
                            InventoryID = 20,
                            AssetID = "AST020",
                            CreatedAt = new DateTime(2025, 6, 1, 21, 1, 9, 597, DateTimeKind.Local).AddTicks(3496),
                            InvoiceNumber = "INV-20250520",
                            Notes = "Đồng phục nhân viên mới",
                            PurchaseDate = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 1500000m,
                            Quantity = 12,
                            SupplierID = 2
                        });
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationID = 1,
                            Address = "120 đường 420, xã, Kim Quan, Thạch Thất, Hà Nội",
                            Description = "Khu hành chính",
                            LocationName = "Tòa nhà Alpha"
                        },
                        new
                        {
                            LocationID = 2,
                            Address = "120 đường 420, xã, Kim Quan, Thạch Thất, Hà Nội",
                            Description = "Phòng học lý thuyết",
                            LocationName = "Tòa nhà Belta"
                        },
                        new
                        {
                            LocationID = 3,
                            Address = "120 đường 420, xã, Kim Quan, Thạch Thất, Hà Nội",
                            Description = "Thư viện trung tâm",
                            LocationName = "Tòa nhà Cilta"
                        },
                        new
                        {
                            LocationID = 4,
                            Address = "120 đường 420, xã, Kim Quan, Thạch Thất, Hà Nội",
                            Description = "Phòng thí nghiệm và lab máy tính",
                            LocationName = "Tòa nhà Delta"
                        },
                        new
                        {
                            LocationID = 5,
                            Address = "120 đường 420, xã, Kim Quan, Thạch Thất, Hà Nội",
                            Description = "Ký túc xá sinh viên",
                            LocationName = "Tòa nhà Emma"
                        });
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.DepreciationModule.DepreciationRecord", b =>
                {
                    b.Property<int>("DepreciationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepreciationID"));

                    b.Property<string>("AssetItemID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DepreciationAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DepreciationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InventoryID")
                        .HasColumnType("int");

                    b.Property<decimal>("NewValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("DepreciationID");

                    b.HasIndex("AssetItemID");

                    b.HasIndex("InventoryID", "AssetItemID");

                    b.ToTable("DepreciationRecords");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.MaintainModule.AssetIssue", b =>
                {
                    b.Property<int>("IssueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueID"));

                    b.Property<string>("AssetItemID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("InventoryID")
                        .HasColumnType("int");

                    b.Property<string>("IssueDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IssueID");

                    b.HasIndex("AssetItemID");

                    b.HasIndex("ReportedBy");

                    b.HasIndex("InventoryID", "AssetItemID");

                    b.ToTable("AssetIssues");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.MaintainModule.MaintenanceRecord", b =>
                {
                    b.Property<int>("MaintenanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceID"));

                    b.Property<string>("AssetItemID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompletionPhoto")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int?>("IssueID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaintenanceQuantity")
                        .HasColumnType("int");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MaintenanceID");

                    b.HasIndex("AssetItemID");

                    b.HasIndex("IssueID")
                        .IsUnique()
                        .HasFilter("[IssueID] IS NOT NULL");

                    b.HasIndex("PerformedBy");

                    b.HasIndex("InventoryID", "AssetItemID");

                    b.ToTable("MaintenanceRecords");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.SupplierModule.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierID = 1,
                            Address = "123 Đường Lê Lợi, Quận 1, TP.HCM",
                            ContactInfo = "0123 456 789",
                            Notes = "Nhà cung cấp chính cho phòng lab",
                            SupplierName = "Công ty TNHH Thiết Bị Giáo Dục A"
                        },
                        new
                        {
                            SupplierID = 2,
                            Address = "456 Đường Trần Hưng Đạo, Quận 5, TP.HCM",
                            ContactInfo = "0987 654 321",
                            Notes = "Chuyên cung cấp thiết bị phòng học",
                            SupplierName = "Công ty CP Thiết Bị Học Đường B"
                        },
                        new
                        {
                            SupplierID = 3,
                            Address = "789 Đường Nguyễn Trãi, Quận 3, TP.HCM",
                            ContactInfo = "0932 111 222",
                            Notes = "Cung cấp máy chiếu và thiết bị trình chiếu",
                            SupplierName = "Công ty TNHH Máy Chiếu C"
                        },
                        new
                        {
                            SupplierID = 4,
                            Address = "321 Đường Cách Mạng Tháng 8, Quận 10, TP.HCM",
                            ContactInfo = "0909 888 777",
                            Notes = "Chuyên về nội thất phòng học và văn phòng",
                            SupplierName = "Công ty CP Nội Thất D"
                        },
                        new
                        {
                            SupplierID = 5,
                            Address = "654 Đường Lý Thường Kiệt, Quận Tân Bình, TP.HCM",
                            ContactInfo = "0977 123 456",
                            Notes = "Cung cấp văn phòng phẩm định kỳ",
                            SupplierName = "Công ty TNHH Văn Phòng Phẩm E"
                        },
                        new
                        {
                            SupplierID = 6,
                            Address = "987 Đường Hai Bà Trưng, Quận 1, TP.HCM",
                            ContactInfo = "0912 345 678",
                            Notes = "Cung cấp thiết bị văn phòng cao cấp",
                            SupplierName = "Công ty CP Thiết Bị Văn Phòng F"
                        });
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.UserModule.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Age = 21,
                            ConcurrencyStamp = "19b46261-dba6-4b61-9730-437c9363a829",
                            CreateAt = "2025-06-01 14:01:09",
                            District = "Cau Giay",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FirstName = "First1",
                            IsActive = true,
                            IsMale = false,
                            LastName = "Last1",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEEUMTeuXWxCSqcrN6N6YbWQkZInK6Yq9D4Uc4WMaPt84dauKwxZmSPzR6GkODi75xw==",
                            PhoneNumber = "0987654301",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "19f0b6c9-3902-4a35-8f5d-b947411e4f8f",
                            Street = "Street 1",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:09",
                            UserName = "user1",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "42027e43-b5bd-4f96-8a8b-7d90e80b8a83",
                            CreateAt = "2025-06-01 14:01:09",
                            District = "Cau Giay",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FirstName = "First2",
                            IsActive = true,
                            IsMale = true,
                            LastName = "Last2",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEN7t+9wVcLyHXMonJHFaK3f+Bs42Th4ob8StsysGVuDEwo/oURLnwMe5Q442u5J2iA==",
                            PhoneNumber = "0987654302",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "71500a8e-8a3a-4842-b819-81d82ead4bea",
                            Street = "Street 2",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:09",
                            UserName = "user2",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            Age = 23,
                            ConcurrencyStamp = "92956fa8-67ef-4cd7-96de-3324479ee2bd",
                            CreateAt = "2025-06-01 14:01:09",
                            District = "Cau Giay",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            FirstName = "First3",
                            IsActive = true,
                            IsMale = false,
                            LastName = "Last3",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEDrRyceQ0ONpiitoko2hw/yI0reEIeNpbxWepEf/82lX4BUnCewd5HIrw9yOjz4/hQ==",
                            PhoneNumber = "0987654303",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "47ee739c-70a5-470b-9d9f-522a8d1f26cd",
                            Street = "Street 3",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:09",
                            UserName = "user3",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            Age = 24,
                            ConcurrencyStamp = "69003afb-6865-4246-b997-4a19a0d66c3e",
                            CreateAt = "2025-06-01 14:01:09",
                            District = "Cau Giay",
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            FirstName = "First4",
                            IsActive = true,
                            IsMale = true,
                            LastName = "Last4",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAELf79WdtgI1jwl/+ZUHHxdinaVvDEm/fRSg4hQlAXbqymK/YmQreVjilYboXNX/fRA==",
                            PhoneNumber = "0987654304",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "cf78ff1d-e486-4ba1-aa40-80de0697541b",
                            Street = "Street 4",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:09",
                            UserName = "user4",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            Age = 25,
                            ConcurrencyStamp = "95f2b291-0d5e-4fca-8fe5-5dd8260dbf76",
                            CreateAt = "2025-06-01 14:01:09",
                            District = "Cau Giay",
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            FirstName = "First5",
                            IsActive = true,
                            IsMale = false,
                            LastName = "Last5",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEP9fdxUftNMz3Ne+6KeU/P+9E+HnFlfV3shDzdumtI0Q/RhwSHWCkYt2IEkJrOMtow==",
                            PhoneNumber = "0987654305",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "17aae616-f926-4a0f-acbc-d85dd7bb5e50",
                            Street = "Street 5",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:09",
                            UserName = "user5",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            Age = 26,
                            ConcurrencyStamp = "a5153d24-a4b9-4a9d-995e-9e86df404669",
                            CreateAt = "2025-06-01 14:01:09",
                            District = "Cau Giay",
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            FirstName = "First6",
                            IsActive = true,
                            IsMale = true,
                            LastName = "Last6",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ4cVDAMiVuLMrCoQ/H7zzRfRDIHptkggKcREZko9UYT8yj970q6ivPr3T3qq44YhQ==",
                            PhoneNumber = "0987654306",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "8103490a-bfca-44fb-89ba-c96566569c1a",
                            Street = "Street 6",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:09",
                            UserName = "user6",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            Age = 27,
                            ConcurrencyStamp = "8a800d8b-accf-4742-9eb9-0b9b31716b29",
                            CreateAt = "2025-06-01 14:01:09",
                            District = "Cau Giay",
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            FirstName = "First7",
                            IsActive = true,
                            IsMale = false,
                            LastName = "Last7",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEPVUG8O9q544zU0aoS+xfzzKIUGE4YbQInMAO+r/7lJz/SKy1vmNirBSHyqj4Tpqqg==",
                            PhoneNumber = "0987654307",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "424b0155-3618-407e-9299-1074c9af9ed8",
                            Street = "Street 7",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:09",
                            UserName = "user7",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            Age = 28,
                            ConcurrencyStamp = "d57ad967-6d38-40e3-8d2d-cd24ca820f7a",
                            CreateAt = "2025-06-01 14:01:09",
                            District = "Cau Giay",
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            FirstName = "First8",
                            IsActive = true,
                            IsMale = true,
                            LastName = "Last8",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEDFRTT9wfJmJSUasuy+jHMTSHJqSa8aFYA/pmKrDVCEjUiHZACNrozR9zuy1r5datw==",
                            PhoneNumber = "0987654308",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "16c3d4ac-b4f7-4b9b-97ee-5da2a80c8188",
                            Street = "Street 8",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:09",
                            UserName = "user8",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            Age = 29,
                            ConcurrencyStamp = "2664f510-df14-4606-a348-a23b4d40d34e",
                            CreateAt = "2025-06-01 14:01:09",
                            District = "Cau Giay",
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            FirstName = "First9",
                            IsActive = true,
                            IsMale = false,
                            LastName = "Last9",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGq9i0LUvJpRWufUHOuHG+aruuYULF2H1oQDiXzGhx0UZbqOsqEUARBY0xLgNGCBA==",
                            PhoneNumber = "0987654309",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "707318d1-a4c2-498d-853c-90f100aac6c5",
                            Street = "Street 9",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:09",
                            UserName = "user9",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            Age = 20,
                            ConcurrencyStamp = "e22ac14f-a1a0-4cfc-9e16-52fc96713625",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            FirstName = "First10",
                            IsActive = true,
                            IsMale = true,
                            LastName = "Last10",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEI7PDZihky9DdvhIMU5LINpjfCiGVqS4QFCpw3mXEis99J+xcE5HW9EgJ/AI+necsw==",
                            PhoneNumber = "0987654310",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "8579663e-d173-435d-946e-fc38753ae80c",
                            Street = "Street 10",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user10",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user11",
                            AccessFailedCount = 0,
                            Age = 21,
                            ConcurrencyStamp = "57f8fdbf-a6a2-4df3-8e71-ca878f61103b",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            FirstName = "First11",
                            IsActive = true,
                            IsMale = false,
                            LastName = "Last11",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAEEtZsOy7a6i3wi1DcNtzrXgBEXYO4IY2+wU7hrHlCadCb1q3eGWCB2xrsVL9ZVirCg==",
                            PhoneNumber = "0987654311",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "81778c8a-e31e-494c-a243-58a573096bfc",
                            Street = "Street 11",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user11",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user12",
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "b81bce75-7ec7-4bfc-a83c-35a05f87f665",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            FirstName = "First12",
                            IsActive = true,
                            IsMale = true,
                            LastName = "Last12",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAEPyDE7/EMmUKtM+5X1OSjCQQbrV0KQTaMRpUdJKNtVyz8EEL8svRpH5h7ex410zOow==",
                            PhoneNumber = "0987654312",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "9c11ea67-2272-488d-9d47-da7449d2d695",
                            Street = "Street 12",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user12",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user13",
                            AccessFailedCount = 0,
                            Age = 23,
                            ConcurrencyStamp = "2b30d55f-ca70-44e2-a1dd-c3a3e2bdd92d",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user13@example.com",
                            EmailConfirmed = true,
                            FirstName = "First13",
                            IsActive = true,
                            IsMale = false,
                            LastName = "Last13",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER13@EXAMPLE.COM",
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAIAAYagAAAAEA80xOPgAZJqAfmHUqLZujKxL0ztY+naX/5iTxLPEZyNnjYJQ0p6MWwQTRCIpf93fQ==",
                            PhoneNumber = "0987654313",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "392f01fa-5c77-44e4-9bca-f1940cee3580",
                            Street = "Street 13",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user13",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user14",
                            AccessFailedCount = 0,
                            Age = 24,
                            ConcurrencyStamp = "9eeda37a-6bd4-4d4a-8c54-71867e55feee",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user14@example.com",
                            EmailConfirmed = true,
                            FirstName = "First14",
                            IsActive = true,
                            IsMale = true,
                            LastName = "Last14",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER14@EXAMPLE.COM",
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAIAAYagAAAAENqM2iFzMV0ZOwrxbioipOEqx66DEhx2o5Cbfsd0E6IJyHbyzJXUNvl6I5zIjnxjIA==",
                            PhoneNumber = "0987654314",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "abbbc5b5-9386-42c3-9c7a-578ef423507a",
                            Street = "Street 14",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user14",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user15",
                            AccessFailedCount = 0,
                            Age = 25,
                            ConcurrencyStamp = "95fd1d60-36d5-4177-ba97-590a72b8815c",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user15@example.com",
                            EmailConfirmed = true,
                            FirstName = "First15",
                            IsActive = true,
                            IsMale = false,
                            LastName = "Last15",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER15@EXAMPLE.COM",
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAIAAYagAAAAEBmISZ4H+VSinWuY2xa7uQAiGOcRf+O7XNCuWBwdLl37tmzZ1W4nzqRRq02puCZruw==",
                            PhoneNumber = "0987654315",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "4b3babf3-7946-4d92-8fca-08e8953aecc9",
                            Street = "Street 15",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user15",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user16",
                            AccessFailedCount = 0,
                            Age = 26,
                            ConcurrencyStamp = "51a16562-72aa-4589-af55-cf88f8359b0d",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user16@example.com",
                            EmailConfirmed = true,
                            FirstName = "First16",
                            IsActive = true,
                            IsMale = true,
                            LastName = "Last16",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER16@EXAMPLE.COM",
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAIAAYagAAAAEGdwUZpu+ZkgYpT9vFnhpKSOHiRW/EtdGHxOm/2PhYq5DTDOTKOdZAT0sci6BKVBTg==",
                            PhoneNumber = "0987654316",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "b6b7e5ee-94cf-4323-a183-2a6ab6601dfc",
                            Street = "Street 16",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user16",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user17",
                            AccessFailedCount = 0,
                            Age = 27,
                            ConcurrencyStamp = "6335c5bb-b2aa-4124-b538-9b8d5ed2d89d",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user17@example.com",
                            EmailConfirmed = true,
                            FirstName = "First17",
                            IsActive = true,
                            IsMale = false,
                            LastName = "Last17",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER17@EXAMPLE.COM",
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGbYi4kGgJytzZOCqoASt/23Wzk1f9JZoniLr6sWElQXe4q6ebfOESmAm9xzUpOIw==",
                            PhoneNumber = "0987654317",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "6499864b-3ce5-440e-a257-1f760f84b287",
                            Street = "Street 17",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user17",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user18",
                            AccessFailedCount = 0,
                            Age = 28,
                            ConcurrencyStamp = "4dee82b9-0f58-43b5-981b-b7ad3595e092",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user18@example.com",
                            EmailConfirmed = true,
                            FirstName = "First18",
                            IsActive = true,
                            IsMale = true,
                            LastName = "Last18",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER18@EXAMPLE.COM",
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAIAAYagAAAAEOH+OeCjGcQ6l35nrdRkr4tHCCT5N6eao94Nq2ddhIpeFNP+9LuEqeKOvCVSIDn9gg==",
                            PhoneNumber = "0987654318",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "20f7d017-707e-487a-a709-4b2b961c0dba",
                            Street = "Street 18",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user18",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user19",
                            AccessFailedCount = 0,
                            Age = 29,
                            ConcurrencyStamp = "f2c971ec-7bd1-432b-baa9-4b8176f4ab5e",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user19@example.com",
                            EmailConfirmed = true,
                            FirstName = "First19",
                            IsActive = true,
                            IsMale = false,
                            LastName = "Last19",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER19@EXAMPLE.COM",
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAIAAYagAAAAEJgZ0aERnm+h77LiUwcLq2RXfMSbfx9WbBpoTqg7z039hwB/94sgMKOc4sdFhIjoEw==",
                            PhoneNumber = "0987654319",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "1144c4ee-f122-437c-b283-533f32008481",
                            Street = "Street 19",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user19",
                            Ward = "Dich Vong Hau"
                        },
                        new
                        {
                            Id = "user20",
                            AccessFailedCount = 0,
                            Age = 20,
                            ConcurrencyStamp = "5c24f190-57f5-4541-9509-46f89f806db5",
                            CreateAt = "2025-06-01 14:01:10",
                            District = "Cau Giay",
                            Email = "user20@example.com",
                            EmailConfirmed = true,
                            FirstName = "First20",
                            IsActive = true,
                            IsMale = true,
                            LastName = "Last20",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER20@EXAMPLE.COM",
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAIAAYagAAAAEN/T6H+tJua6jK58Bz0b1iWhzelXPxSVy4GKjY5BhLhWMSjgNgsVLB0J8kULrpSLJw==",
                            PhoneNumber = "0987654320",
                            PhoneNumberConfirmed = true,
                            Province = "Hanoi",
                            SecurityStamp = "4a0f2bc8-b8de-4e94-a5d9-7035d1aa4211",
                            Street = "Street 20",
                            TwoFactorEnabled = false,
                            UpdateAt = "2025-06-01 14:01:10",
                            UserName = "user20",
                            Ward = "Dich Vong Hau"
                        });
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.UserModule.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Permission to view assets",
                            Name = "ViewAssets"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Permission to create new assets",
                            Name = "CreateAssets"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Permission to edit existing assets",
                            Name = "EditAssets"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Permission to delete assets",
                            Name = "DeleteAssets"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Permission to manage user accounts",
                            Name = "ManageUsers"
                        });
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.UserModule.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = "role1",
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = "role1",
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = "role1",
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = "role1",
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = "role1",
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = "role2",
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = "role2",
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = "role2",
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = "role3",
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = "role4",
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = "role4",
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = "role5",
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.UserModule.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "role1",
                            CreatedAt = new DateTime(2025, 6, 1, 14, 1, 10, 615, DateTimeKind.Utc).AddTicks(5184),
                            Description = "System administrator with full access",
                            IsActive = true,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            UpdatedAt = new DateTime(2025, 6, 1, 14, 1, 10, 615, DateTimeKind.Utc).AddTicks(5184)
                        },
                        new
                        {
                            Id = "role2",
                            CreatedAt = new DateTime(2025, 6, 1, 14, 1, 10, 615, DateTimeKind.Utc).AddTicks(5184),
                            Description = "Manager with permission to assign and review assets",
                            IsActive = true,
                            Name = "Manager",
                            NormalizedName = "MANAGER",
                            UpdatedAt = new DateTime(2025, 6, 1, 14, 1, 10, 615, DateTimeKind.Utc).AddTicks(5184)
                        },
                        new
                        {
                            Id = "role3",
                            CreatedAt = new DateTime(2025, 6, 1, 14, 1, 10, 615, DateTimeKind.Utc).AddTicks(5184),
                            Description = "Regular staff managing assigned assets",
                            IsActive = true,
                            Name = "Staff",
                            NormalizedName = "STAFF",
                            UpdatedAt = new DateTime(2025, 6, 1, 14, 1, 10, 615, DateTimeKind.Utc).AddTicks(5184)
                        },
                        new
                        {
                            Id = "role4",
                            CreatedAt = new DateTime(2025, 6, 1, 14, 1, 10, 615, DateTimeKind.Utc).AddTicks(5184),
                            Description = "Handles maintenance and repairs",
                            IsActive = true,
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN",
                            UpdatedAt = new DateTime(2025, 6, 1, 14, 1, 10, 615, DateTimeKind.Utc).AddTicks(5184)
                        },
                        new
                        {
                            Id = "role5",
                            CreatedAt = new DateTime(2025, 6, 1, 14, 1, 10, 615, DateTimeKind.Utc).AddTicks(5184),
                            Description = "Read-only access for audit or tracking",
                            IsActive = true,
                            Name = "Viewer",
                            NormalizedName = "VIEWER",
                            UpdatedAt = new DateTime(2025, 6, 1, 14, 1, 10, 615, DateTimeKind.Utc).AddTicks(5184)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "user1",
                            RoleId = "role1"
                        },
                        new
                        {
                            UserId = "user2",
                            RoleId = "role1"
                        },
                        new
                        {
                            UserId = "user3",
                            RoleId = "role1"
                        },
                        new
                        {
                            UserId = "user4",
                            RoleId = "role1"
                        },
                        new
                        {
                            UserId = "user5",
                            RoleId = "role2"
                        },
                        new
                        {
                            UserId = "user6",
                            RoleId = "role2"
                        },
                        new
                        {
                            UserId = "user7",
                            RoleId = "role2"
                        },
                        new
                        {
                            UserId = "user8",
                            RoleId = "role2"
                        },
                        new
                        {
                            UserId = "user9",
                            RoleId = "role3"
                        },
                        new
                        {
                            UserId = "user10",
                            RoleId = "role3"
                        },
                        new
                        {
                            UserId = "user11",
                            RoleId = "role3"
                        },
                        new
                        {
                            UserId = "user12",
                            RoleId = "role3"
                        },
                        new
                        {
                            UserId = "user13",
                            RoleId = "role4"
                        },
                        new
                        {
                            UserId = "user14",
                            RoleId = "role4"
                        },
                        new
                        {
                            UserId = "user15",
                            RoleId = "role4"
                        },
                        new
                        {
                            UserId = "user16",
                            RoleId = "role4"
                        },
                        new
                        {
                            UserId = "user17",
                            RoleId = "role5"
                        },
                        new
                        {
                            UserId = "user18",
                            RoleId = "role5"
                        },
                        new
                        {
                            UserId = "user19",
                            RoleId = "role5"
                        },
                        new
                        {
                            UserId = "user20",
                            RoleId = "role5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.Asset", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.AssetModule.AssetType", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetType");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.AssetItem", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.AssetModule.InventoryAsset", "InventoryAsset")
                        .WithMany("AssetItems")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Models.Entities.AssetModule.Location", "Location")
                        .WithMany("AssetItems")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AssetManagement.Models.Entities.UserModule.ApplicationUser", "UpdatedByUser")
                        .WithMany("UpdatedAssetItems")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InventoryAsset");

                    b.Navigation("Location");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.InventoryAsset", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.AssetModule.Asset", "Asset")
                        .WithMany("InventoryAssets")
                        .HasForeignKey("AssetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AssetManagement.Models.Entities.SupplierModule.Supplier", "Supplier")
                        .WithMany("InventoryAssets")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Asset");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.DepreciationModule.DepreciationRecord", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.AssetModule.AssetItem", "AssetItem")
                        .WithMany("DepreciationRecords")
                        .HasForeignKey("AssetItemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AssetManagement.Models.Entities.AssetModule.InventoryAsset", "InventoryAsset")
                        .WithMany("DepreciationRecords")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssetItem");

                    b.Navigation("InventoryAsset");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.MaintainModule.AssetIssue", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.AssetModule.AssetItem", "AssetItem")
                        .WithMany("Issues")
                        .HasForeignKey("AssetItemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AssetManagement.Models.Entities.AssetModule.InventoryAsset", "InventoryAsset")
                        .WithMany("Issues")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AssetManagement.Models.Entities.UserModule.ApplicationUser", "Reporter")
                        .WithMany("ReportedIssues")
                        .HasForeignKey("ReportedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetItem");

                    b.Navigation("InventoryAsset");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.MaintainModule.MaintenanceRecord", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.AssetModule.AssetItem", "AssetItem")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("AssetItemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AssetManagement.Models.Entities.AssetModule.InventoryAsset", "InventoryAsset")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AssetManagement.Models.Entities.MaintainModule.AssetIssue", "Issue")
                        .WithOne("MaintenanceRecord")
                        .HasForeignKey("AssetManagement.Models.Entities.MaintainModule.MaintenanceRecord", "IssueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AssetManagement.Models.Entities.UserModule.ApplicationUser", "Maintainer")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetItem");

                    b.Navigation("InventoryAsset");

                    b.Navigation("Issue");

                    b.Navigation("Maintainer");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.UserModule.RolePermission", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.UserModule.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Models.Entities.UserModule.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Models.Entities.UserModule.UserRole", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.UserModule.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.UserModule.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.UserModule.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.UserModule.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Models.Entities.UserModule.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AssetManagement.Models.Entities.UserModule.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.Asset", b =>
                {
                    b.Navigation("InventoryAssets");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.AssetItem", b =>
                {
                    b.Navigation("DepreciationRecords");

                    b.Navigation("Issues");

                    b.Navigation("MaintenanceRecords");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.AssetType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.InventoryAsset", b =>
                {
                    b.Navigation("AssetItems");

                    b.Navigation("DepreciationRecords");

                    b.Navigation("Issues");

                    b.Navigation("MaintenanceRecords");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.AssetModule.Location", b =>
                {
                    b.Navigation("AssetItems");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.MaintainModule.AssetIssue", b =>
                {
                    b.Navigation("MaintenanceRecord");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.SupplierModule.Supplier", b =>
                {
                    b.Navigation("InventoryAssets");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.UserModule.ApplicationUser", b =>
                {
                    b.Navigation("MaintenanceRecords");

                    b.Navigation("ReportedIssues");

                    b.Navigation("UpdatedAssetItems");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.UserModule.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("AssetManagement.Models.Entities.UserModule.UserRole", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
